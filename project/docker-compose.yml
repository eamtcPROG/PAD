services:
  ticketorder:
    container_name: ticketorder
    build: ./services/ticketorder
    ports:
      - '4000:4000'
    depends_on:
      - mongo
      - redis-cluster
      - servicediscovery
    environment:
      MONGO_URI: mongodb://root:password@mongo:27017/ticketorderdb?authSource=admin
      SERVICE_DISCOVERY_URL: http://servicediscovery:8080/api/ServiceDiscovery
      SERVICE_NAME: ticketorder
      SERVICE_PORT: 4000
      SERVICE_ADDRESS: http://ticketorder
    labels:
      - "com.docker.compose.service=ticketorder"
      - "port=4000"
    networks:
      - app-network
      - redis_cluster
    deploy:
      restart_policy:
        condition: on-failure

  ticketorder_2:
    container_name: ticketorder_2
    build: ./services/ticketorder
    ports:
      - '4010:4010'
    depends_on:
      - mongo
      - redis-cluster
      - servicediscovery
    environment:
      MONGO_URI: mongodb://root:password@mongo:27017/ticketorderdb?authSource=admin
      SERVICE_DISCOVERY_URL: http://servicediscovery:8080/api/ServiceDiscovery
      SERVICE_NAME: ticketorder
      SERVICE_PORT: 4010
      SERVICE_ADDRESS: http://ticketorder_2
    labels:
      - "com.docker.compose.service=ticketorder"
      - "port=4010"
    networks:
      - app-network
      - redis_cluster
    deploy:
      restart_policy:
        condition: on-failure
    
  ticketorder_3:
    container_name: ticketorder_3
    build: ./services/ticketorder
    ports:
      - '4020:4020'
    depends_on:
      - mongo
      - redis-cluster
      - servicediscovery
    environment:
      MONGO_URI: mongodb://root:password@mongo:27017/ticketorderdb?authSource=admin
      SERVICE_DISCOVERY_URL: http://servicediscovery:8080/api/ServiceDiscovery
      SERVICE_NAME: ticketorder
      SERVICE_PORT: 4020
      SERVICE_ADDRESS: http://ticketorder_3
    labels:
      - "com.docker.compose.service=ticketorder"
      - "port=4020"
    networks:
      - app-network
      - redis_cluster
    deploy:
      restart_policy:
        condition: on-failure

  user:
    build: ./services/user
    container_name: user
    ports:
      - '4001'
      - '4005:4005'
    depends_on:
      - postgres
      - redis
      - servicediscovery
    environment:
      DATABASE_URL: postgres://postgres:password@postgres:5432/userdb
      SERVICE_DISCOVERY_URL: http://servicediscovery:8080/api/ServiceDiscovery
      SERVICE_NAME: user
      SERVICE_PORT: 4001
      SERVICE_ADDRESS: http://user
    labels:
      - "service=user"
      - "com.docker.compose.service=user"
      - "port=4001"
    networks:
      - app-network    
    deploy:
      restart_policy:
        condition: on-failure

  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - '27017:27017'
    volumes:
      - mongo-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    networks:
      - app-network
    
  
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: userdb
    ports:
      - '5432:5432'
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

  redis:
    image: "redis:alpine"
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network

  gateway:
    build: ./services/gateway
    container_name: gateway
    ports:
      - "5000:80" 
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80  
    networks:
      - app-network
    depends_on:
      - user
      - ticketorder
      - ticketorder_2
      - ticketorder_3
      - servicediscovery
      - redis
  
  servicediscovery:
    build: ./services/servicediscovery
    container_name: servicediscovery
    ports:
      - '5002:8080'
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - Redis__Configuration=redis:6379
    depends_on:
      - redis
    networks:
      - app-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      - app-network

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.0
    container_name: logstash
    volumes:
      - ./logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch
    networks:
      - app-network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - app-network

  filebeat:
    image: docker.elastic.co/beats/filebeat:7.17.0
    container_name: filebeat
    user: root 
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    depends_on:
      - logstash
    networks:
      - app-network

  redis1:
    image: redis:6.2-alpine
    container_name: redis1
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./redisconf/redis1.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "7001:7001"
    networks:
      - app-network
    hostname: redis1

  redis2:
    image: redis:6.2-alpine
    container_name: redis2
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./redisconf/redis2.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "7002:7002"
    networks:
      - app-network
    hostname: redis2

  redis3:
    image: redis:6.2-alpine
    container_name: redis3
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./redisconf/redis3.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "7003:7003"
    networks:
      - app-network
    hostname: redis3

  redis4:
    image: redis:6.2-alpine
    container_name: redis4
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./redisconf/redis4.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "7004:7004"
    networks:
      - app-network
    hostname: redis4

  redis5:
    image: redis:6.2-alpine
    container_name: redis5
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./redisconf/redis5.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "7005:7005"
    networks:
      - app-network
    hostname: redis5

  redis6:
    image: redis:6.2-alpine
    container_name: redis6
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./redisconf/redis6.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "7006:7006"
    networks:
      - app-network
    hostname: redis6

  redis7:
    image: redis:6.2-alpine
    container_name: redis7
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./redisconf/redis7.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "7007:7007"
    networks:
      - app-network
    hostname: redis7

  redis8:
    image: redis:6.2-alpine
    container_name: redis8
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./redisconf/redis8.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "7008:7008"
    networks:
      - app-network
    hostname: redis8

  redis9:
    image: redis:6.2-alpine
    container_name: redis9
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./redisconf/redis9.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "7009:7009"
    networks:
      - app-network
    hostname: redis9

  redis-cluster:
    image: redis:latest
    container_name: redis-cluster
    ports:
      - "6999:6999"
    depends_on:
      - redis1
      - redis2
      - redis3
      - redis4
      - redis5
      - redis6
      - redis7
      - redis8
      - redis9
    command: redis-cli -p 7000 --cluster create redis1:7001 redis2:7002 redis3:7003 redis4:7004 redis5:7005 redis6:7006 redis7:7007 redis8:7008 redis9:7009 --cluster-replicas 2 --cluster-yes
    networks:
      - app-network


volumes:
  mongo-data:
  postgres-data:
  esdata:

networks:
  app-network:
    driver: bridge
  redis_cluster:
    driver: bridge